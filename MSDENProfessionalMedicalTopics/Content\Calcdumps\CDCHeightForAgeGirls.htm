<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>CDC height for age percentiles for girls (2 to 20 years)</title>
<link href="medcalcstyles.css" type="text/css" rel="stylesheet" />
<meta name="description" content="Medical Calculators, Criteria Sets and Decision Trees" />
<meta name="keywords" content="patientuse, Nurse, pediatrics, anthropometrics, PMR, epidemiology, medcalc3000, medical, education, criteria, treecalc, decision, tree, medicine, clinical, medcalc, 3000, mdcalc, medicalc, medmath, clinicalc, clincalc, online, clinical" /> 
<meta name="author" content="Foundation Internet Services, LLC" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
</head>
<body class="medCalcBody">
<div id="mc3k">
<script language="JavaScript1.1" type="text/javascript">
/* <![CDATA[ */

function log(i){
return Math.log(i) * Math.LOG10E;   
}

function ln(i){
return Math.log(i);
}

function sq(i){
return i * i;
}

function sqr(i){
return Math.sqrt(i);
}


function power(x,y){
return Math.pow(x,y);
}

function eTo(x){
return Math.exp(x);
}


function fixDP(r, dps) {
if (isNaN(r)) return "NaN";
var msign = '';
if (r < 0) msign = '-';
x = Math.abs(r);
if (x > Math.pow(10, 21)) return msign + x.toString();
var m = Math.round(x * Math.pow(10, dps)).toString();
if (dps == 0) return msign + m;
while (m.length <= dps) m = "0" + m;
return msign + m.substring(0, m.length - dps) + "." + m.substring(m.length - dps);
}

function alertNaN(thisparam){
 alert(thisparam + ' is improperly formatted. You may only input the digits 0-9 and a decimal point.');
doCalc = false;
clrResults();
}

function clrValue(field) {
field.value = '';
}

var currenttimeout;

function resetInTime(){
if (currenttimeout) clearTimeout(currenttimeout);
currenttimeout = setTimeout('minMaxCheck();', 3000);
}


n = new Array;
var L = 0;
var M = 0;
var S = 0;

n[0] = 50;
n[1] = 50.399;
n[2] = 50.798;
n[3] = 51.197;
n[4] = 51.595;
n[5] = 51.994;
n[6] = 52.392;
n[7] = 52.79;
n[8] = 53.188;
n[9] = 53.586;
n[10] = 53.983;
n[11] = 54.38;
n[12] = 54.776;
n[13] = 55.172;
n[14] = 55.567;
n[15] = 55.962;
n[16] = 56.356;
n[17] = 56.749;
n[18] = 57.142;
n[19] = 57.535;
n[20] = 57.926;
n[21] = 58.317;
n[22] = 58.706;
n[23] = 59.095;
n[24] = 59.483;
n[25] = 59.871;
n[26] = 60.257;
n[27] = 60.642;
n[28] = 61.026;
n[29] = 61.409;
n[30] = 61.791;
n[31] = 62.172;
n[32] = 62.552;
n[33] = 62.93;
n[34] = 63.307;
n[35] = 63.683;
n[36] = 64.058;
n[37] = 64.431;
n[38] = 64.803;
n[39] = 65.173;
n[40] = 65.542;
n[41] = 65.91;
n[42] = 66.276;
n[43] = 66.64;
n[44] = 67.003;
n[45] = 67.364;
n[46] = 67.724;
n[47] = 68.082;
n[48] = 68.439;
n[49] = 68.793;
n[50] = 69.146;
n[51] = 69.497;
n[52] = 69.847;
n[53] = 70.194;
n[54] = 70.54;
n[55] = 70.884;
n[56] = 71.226;
n[57] = 71.566;
n[58] = 71.904;
n[59] = 72.24;
n[60] = 72.575;
n[61] = 72.907;
n[62] = 73.237;
n[63] = 73.565;
n[64] = 73.891;
n[65] = 74.215;
n[66] = 74.537;
n[67] = 74.857;
n[68] = 75.175;
n[69] = 75.49;
n[70] = 75.804;
n[71] = 76.115;
n[72] = 76.424;
n[73] = 76.73;
n[74] = 77.035;
n[75] = 77.337;
n[76] = 77.637;
n[77] = 77.935;
n[78] = 78.23;
n[79] = 78.524;
n[80] = 78.814;
n[81] = 79.103;
n[82] = 79.389;
n[83] = 79.673;
n[84] = 79.955;
n[85] = 80.234;
n[86] = 80.511;
n[87] = 80.785;
n[88] = 81.057;
n[89] = 81.327;
n[90] = 81.594;
n[91] = 81.859;
n[92] = 82.121;
n[93] = 82.381;
n[94] = 82.639;
n[95] = 82.894;
n[96] = 83.147;
n[97] = 83.398;
n[98] = 83.646;
n[99] = 83.891;
n[100] = 84.134;
n[101] = 84.375;
n[102] = 84.614;
n[103] = 84.849;
n[104] = 85.083;
n[105] = 85.314;
n[106] = 85.543;
n[107] = 85.769;
n[108] = 85.993;
n[109] = 86.214;
n[110] = 86.433;
n[111] = 86.65;
n[112] = 86.864;
n[113] = 87.076;
n[114] = 87.286;
n[115] = 87.493;
n[116] = 87.698;
n[117] = 87.9;
n[118] = 88.1;
n[119] = 88.298;
n[120] = 88.493;
n[121] = 88.686;
n[122] = 88.877;
n[123] = 89.065;
n[124] = 89.251;
n[125] = 89.435;
n[126] = 89.617;
n[127] = 89.796;
n[128] = 89.973;
n[129] = 90.147;
n[130] = 90.32;
n[131] = 90.49;
n[132] = 90.658;
n[133] = 90.824;
n[134] = 90.988;
n[135] = 91.149;
n[136] = 91.308;
n[137] = 91.466;
n[138] = 91.621;
n[139] = 91.774;
n[140] = 91.924;
n[141] = 92.073;
n[142] = 92.22;
n[143] = 92.364;
n[144] = 92.507;
n[145] = 92.647;
n[146] = 92.785;
n[147] = 92.922;
n[148] = 93.056;
n[149] = 93.189;
n[150] = 93.319;
n[151] = 93.448;
n[152] = 93.574;
n[153] = 93.699;
n[154] = 93.822;
n[155] = 93.943;
n[156] = 94.062;
n[157] = 94.179;
n[158] = 94.295;
n[159] = 94.408;
n[160] = 94.52;
n[161] = 94.63;
n[162] = 94.738;
n[163] = 94.845;
n[164] = 94.95;
n[165] = 95.053;
n[166] = 95.154;
n[167] = 95.254;
n[168] = 95.352;
n[169] = 95.449;
n[170] = 95.543;
n[171] = 95.637;
n[172] = 95.728;
n[173] = 95.818;
n[174] = 95.907;
n[175] = 95.994;
n[176] = 96.08;
n[177] = 96.164;
n[178] = 96.246;
n[179] = 96.327;
n[180] = 96.407;
n[181] = 96.485;
n[182] = 96.562;
n[183] = 96.638;
n[184] = 96.712;
n[185] = 96.784;
n[186] = 96.856;
n[187] = 96.926;
n[188] = 96.995;
n[189] = 97.062;
n[190] = 97.128;
n[191] = 97.193;
n[192] = 97.257;
n[193] = 97.32;
n[194] = 97.381;
n[195] = 97.441;
n[196] = 97.5;
n[197] = 97.558;
n[198] = 97.615;
n[199] = 97.67;
n[200] = 97.725;
n[201] = 97.778;
n[202] = 97.831;
n[203] = 97.882;
n[204] = 97.932;
n[205] = 97.982;
n[206] = 98.03;
n[207] = 98.077;
n[208] = 98.124;
n[209] = 98.169;
n[210] = 98.214;
n[211] = 98.257;
n[212] = 98.3;
n[213] = 98.341;
n[214] = 98.382;
n[215] = 98.422;
n[216] = 98.461;
n[217] = 98.5;
n[218] = 98.537;
n[219] = 98.574;
n[220] = 98.61;
n[221] = 98.645;
n[222] = 98.679;
n[223] = 98.713;
n[224] = 98.745;
n[225] = 98.778;
n[226] = 98.809;
n[227] = 98.84;
n[228] = 98.87;
n[229] = 98.899;
n[230] = 98.928;
n[231] = 98.956;
n[232] = 98.983;
n[233] = 99.01;
n[234] = 99.036;
n[235] = 99.061;
n[236] = 99.086;
n[237] = 99.111;
n[238] = 99.134;
n[239] = 99.158;
n[240] = 99.18;
n[241] = 99.202;
n[242] = 99.224;
n[243] = 99.245;
n[244] = 99.266;
n[245] = 99.286;
n[246] = 99.305;
n[247] = 99.324;
n[248] = 99.343;
n[249] = 99.361;
n[250] = 99.379;
n[251] = 99.396;
n[252] = 99.413;
n[253] = 99.43;
n[254] = 99.446;
n[255] = 99.461;
n[256] = 99.477;
n[257] = 99.492;
n[258] = 99.506;
n[259] = 99.52;
n[260] = 99.534;
n[261] = 99.547;
n[262] = 99.56;
n[263] = 99.573;
n[264] = 99.585;
n[265] = 99.598;
n[266] = 99.609;
n[267] = 99.621;
n[268] = 99.632;
n[269] = 99.643;
n[270] = 99.653;
n[271] = 99.664;
n[272] = 99.674;
n[273] = 99.683;
n[274] = 99.693;
n[275] = 99.702;
n[276] = 99.711;
n[277] = 99.72;
n[278] = 99.728;
n[279] = 99.736;
n[280] = 99.744;
n[281] = 99.752;
n[282] = 99.76;
n[283] = 99.767;
n[284] = 99.774;
n[285] = 99.781;
n[286] = 99.788;
n[287] = 99.795;
n[288] = 99.801;
n[289] = 99.807;
n[290] = 99.813;
n[291] = 99.819;
n[292] = 99.825;
n[293] = 99.831;
n[294] = 99.836;
n[295] = 99.841;
n[296] = 99.846;
n[297] = 99.851;
n[298] = 99.856;
n[299] = 99.861;
n[300] = 99.865;
n[301] = 99.869;
n[302] = 99.874;
n[303] = 99.878;
n[304] = 99.882;
n[305] = 99.886;
n[306] = 99.889;
n[307] = 99.893;
n[308] = 99.896;
n[309] = 99.9;

function ZtoPercentile(z){
with (document.CDCHeightForAgeGirls_form){
az = Math.abs(z);
if (z < -3.09) return 0.1;
if (z > 3.09) return 99.9;
thispercentile = n[Math.round(az * 100)];
if (z >= 0) { return thispercentile }
else { return 100 - thispercentile }
}}

var calctxt = ''; 
var xmltxt = ''; 
var xmlresult = '';
var htmtxt = ''; 
var postNow = false;
var printing = false;
var interptxt = '';
var interphtm = '';
var interpxml = '';

function CDCHeightForAgeGirls_fx() {

with(document.CDCHeightForAgeGirls_form){


doCalc = true;
param_value = parseFloat(Age_param.value);
if (isNaN(param_value)){param_value = ""; doCalc = false;}
unit_parts = Age_unit.options[Age_unit.selectedIndex].value.split('|');
Age = param_value * parseFloat(unit_parts[0]) + parseFloat(unit_parts[1]);
param_value = parseFloat(Height_param.value);
if (isNaN(param_value)){param_value = ""; doCalc = false;}
unit_parts = Height_unit.options[Height_unit.selectedIndex].value.split('|');
Height = param_value * parseFloat(unit_parts[0]) + parseFloat(unit_parts[1]);
dp = decpts.options[decpts.selectedIndex].text;
Age_Months =  Age * 12;

if(Age_Months < 25){L = 1.051272912; M = 85.3973169; S = 0.040859727;}
else if(Age_Months < 26){L = 1.041951175; M = 86.29026318; S = 0.041142161;}
else if(Age_Months < 27){L = 1.012592236; M = 87.15714182; S = 0.041349399;}
else if(Age_Months < 28){L = 0.970541909; M = 87.9960184; S = 0.041500428;}
else if(Age_Months < 29){L = 0.921129988; M = 88.8055115; S = 0.041610508;}
else if(Age_Months < 30){L = 0.868221392; M = 89.58476689; S = 0.041691761;}
else if(Age_Months < 31){L = 0.81454413; M = 90.33341722; S = 0.04175368;}
else if(Age_Months < 32){L = 0.761957977; M = 91.0515436; S = 0.041803562;}
else if(Age_Months < 33){L = 0.711660228; M = 91.7396352; S = 0.041846882;}
else if(Age_Months < 34){L = 0.664323379; M = 92.39854429; S = 0.041887626;}
else if(Age_Months < 35){L = 0.620285102; M = 93.02945392; S = 0.041928568;}
else if(Age_Months < 36){L = 0.57955631; M = 93.63382278; S = 0.041971514;}
else if(Age_Months < 37){L = 0.54198094; M = 94.21335709; S = 0.042017509;}
else if(Age_Months < 38){L = 0.511429832; M = 94.79643239; S = 0.042104522;}
else if(Age_Months < 39){L = 0.482799937; M = 95.37391918; S = 0.042199507;}
else if(Age_Months < 40){L = 0.455521041; M = 95.94692677; S = 0.042300333;}
else if(Age_Months < 41){L = 0.429150288; M = 96.51644912; S = 0.042405225;}
else if(Age_Months < 42){L = 0.403351725; M = 97.08337211; S = 0.042512706;}
else if(Age_Months < 43){L = 0.377878239; M = 97.6484807; S = 0.042621565;}
else if(Age_Months < 44){L = 0.352555862; M = 98.21246579; S = 0.042730809;}
else if(Age_Months < 45){L = 0.327270297; M = 98.77593069; S = 0.042839638;}
else if(Age_Months < 46){L = 0.301955463; M = 99.33939735; S = 0.042947412;}
else if(Age_Months < 47){L = 0.276583851; M = 99.9033122; S = 0.043053626;}
else if(Age_Months < 48){L = 0.251158446; M = 100.4680516; S = 0.043157889;}
else if(Age_Months < 49){L = 0.225705996; M = 101.033927; S = 0.043259907;}
else if(Age_Months < 50){L = 0.20027145; M = 101.6011898; S = 0.043359463;}
else if(Age_Months < 51){L = 0.174913356; M = 102.1700358; S = 0.043456406;}
else if(Age_Months < 52){L = 0.149700081; M = 102.7406094; S = 0.043550638;}
else if(Age_Months < 53){L = 0.12470671; M = 103.3130077; S = 0.043642107;}
else if(Age_Months < 54){L = 0.100012514; M = 103.8872839; S = 0.043730791;}
else if(Age_Months < 55){L = 0.075698881; M = 104.4634511; S = 0.043816701;}
else if(Age_Months < 56){L = 0.051847635; M = 105.0414853; S = 0.043899867;}
else if(Age_Months < 57){L = 0.02853967; M = 105.6213287; S = 0.043980337;}
else if(Age_Months < 58){L = 0.005853853; M = 106.2028921; S = 0.044058171;}
else if(Age_Months < 59){L = -0.016133871; M = 106.7860583; S = 0.04413344;}
else if(Age_Months < 60){L = -0.037351181; M = 107.3706841; S = 0.044206218;}
else if(Age_Months < 61){L = -0.057729947; M = 107.9566031; S = 0.044276588;}
else if(Age_Months < 62){L = -0.077206672; M = 108.5436278; S = 0.044344632;}
else if(Age_Months < 63){L = -0.09572283; M = 109.1315521; S = 0.044410436;}
else if(Age_Months < 64){L = -0.113225128; M = 109.7201531; S = 0.044474084;}
else if(Age_Months < 65){L = -0.129665689; M = 110.3091934; S = 0.044535662;}
else if(Age_Months < 66){L = -0.145002179; M = 110.8984228; S = 0.044595254;}
else if(Age_Months < 67){L = -0.159197885; M = 111.4875806; S = 0.044652942;}
else if(Age_Months < 68){L = -0.172221748; M = 112.0763967; S = 0.044708809;}
else if(Age_Months < 69){L = -0.184048358; M = 112.6645943; S = 0.044762936;}
else if(Age_Months < 70){L = -0.194660215; M = 113.2518902; S = 0.044815402;}
else if(Age_Months < 71){L = -0.204030559; M = 113.8380006; S = 0.044866288;}
else if(Age_Months < 72){L = -0.212174408; M = 114.4226317; S = 0.044915672;}
else if(Age_Months < 73){L = -0.219069129; M = 115.0054978; S = 0.044963636;}
else if(Age_Months < 74){L = -0.224722166; M = 115.5863089; S = 0.045010259;}
else if(Age_Months < 75){L = -0.229140412; M = 116.1647782; S = 0.045055624;}
else if(Age_Months < 76){L = -0.232335686; M = 116.7406221; S = 0.045099817;}
else if(Age_Months < 77){L = -0.234324563; M = 117.3135622; S = 0.045142924;}
else if(Age_Months < 78){L = -0.235128195; M = 117.8833259; S = 0.045185036;}
else if(Age_Months < 79){L = -0.234772114; M = 118.4496481; S = 0.045226249;}
else if(Age_Months < 80){L = -0.233286033; M = 119.0122722; S = 0.045266662;}
else if(Age_Months < 81){L = -0.230703633; M = 119.5709513; S = 0.045306383;}
else if(Age_Months < 82){L = -0.227062344; M = 120.1254495; S = 0.045345524;}
else if(Age_Months < 83){L = -0.222403111; M = 120.6755427; S = 0.045384203;}
else if(Age_Months < 84){L = -0.216770161; M = 121.22102; S = 0.045422551;}
else if(Age_Months < 85){L = -0.210210748; M = 121.7616844; S = 0.045460702;}
else if(Age_Months < 86){L = -0.202774891; M = 122.2973542; S = 0.045498803;}
else if(Age_Months < 87){L = -0.194515104; M = 122.827864; S = 0.045537012;}
else if(Age_Months < 88){L = -0.185486099; M = 123.3530652; S = 0.045575495;}
else if(Age_Months < 89){L = -0.175744476; M = 123.8728276; S = 0.045614432;}
else if(Age_Months < 90){L = -0.165348396; M = 124.38704; S = 0.045654016;}
else if(Age_Months < 91){L = -0.15435722; M = 124.8956114; S = 0.04569445;}
else if(Age_Months < 92){L = -0.142831123; M = 125.398472; S = 0.045735953;}
else if(Age_Months < 93){L = -0.130830669; M = 125.895574; S = 0.045778759;}
else if(Age_Months < 94){L = -0.118416354; M = 126.3868929; S = 0.045823114;}
else if(Age_Months < 95){L = -0.105648092; M = 126.8724284; S = 0.04586928;}
else if(Age_Months < 96){L = -0.092584657; M = 127.3522056; S = 0.045917535;}
else if(Age_Months < 97){L = -0.079283065; M = 127.8262759; S = 0.045968169;}
else if(Age_Months < 98){L = -0.065797888; M = 128.2947187; S = 0.04602149;}
else if(Age_Months < 99){L = -0.0521805; M = 128.757642; S = 0.046077818;}
else if(Age_Months < 100){L = -0.03847825; M = 129.2151839; S = 0.046137487;}
else if(Age_Months < 101){L = -0.024733545; M = 129.6675143; S = 0.046200842;}
else if(Age_Months < 102){L = -0.010982868; M = 130.1148354; S = 0.04626824;}
else if(Age_Months < 103){L = 0.002744306; M = 130.5573839; S = 0.046340046;}
else if(Age_Months < 104){L = 0.016426655; M = 130.995432; S = 0.046416629;}
else if(Age_Months < 105){L = 0.030052231; M = 131.4292887; S = 0.046498361;}
else if(Age_Months < 106){L = 0.043619747; M = 131.8593015; S = 0.046585611;}
else if(Age_Months < 107){L = 0.05713988; M = 132.2858574; S = 0.046678741;}
else if(Age_Months < 108){L = 0.070636605; M = 132.7093845; S = 0.046778099;}
else if(Age_Months < 109){L = 0.08414848; M = 133.1303527; S = 0.04688401;}
else if(Age_Months < 110){L = 0.097729873; M = 133.5492749; S = 0.046996769;}
else if(Age_Months < 111){L = 0.111452039; M = 133.9667073; S = 0.047116633;}
else if(Age_Months < 112){L = 0.125404005; M = 134.3832499; S = 0.047243801;}
else if(Age_Months < 113){L = 0.13969316; M = 134.7995463; S = 0.047378413;}
else if(Age_Months < 114){L = 0.154445482; M = 135.2162826; S = 0.047520521;}
else if(Age_Months < 115){L = 0.169805275; M = 135.634186; S = 0.047670085;}
else if(Age_Months < 116){L = 0.185934346; M = 136.0540223; S = 0.047826946;}
else if(Age_Months < 117){L = 0.203010488; M = 136.4765925; S = 0.04799081;}
else if(Age_Months < 118){L = 0.2212252; M = 136.9027281; S = 0.048161228;}
else if(Age_Months < 119){L = 0.240780542; M = 137.3332846; S = 0.04833757;}
else if(Age_Months < 120){L = 0.261885086; M = 137.7691339; S = 0.048519011;}
else if(Age_Months < 121){L = 0.284748919; M = 138.2111552; S = 0.048704503;}
else if(Age_Months < 122){L = 0.309577733; M = 138.6602228; S = 0.048892759;}
else if(Age_Months < 123){L = 0.336566048; M = 139.1171933; S = 0.049082239;}
else if(Age_Months < 124){L = 0.365889711; M = 139.5828898; S = 0.049271137;}
else if(Age_Months < 125){L = 0.397699038; M = 140.0580848; S = 0.049457371;}
else if(Age_Months < 126){L = 0.432104409; M = 140.5434787; S = 0.049638596;}
else if(Age_Months < 127){L = 0.46917993; M = 141.0396832; S = 0.049812203;}
else if(Age_Months < 128){L = 0.508943272; M = 141.5471945; S = 0.049975355;}
else if(Age_Months < 129){L = 0.551354277; M = 142.0663731; S = 0.050125012;}
else if(Age_Months < 130){L = 0.596307363; M = 142.59742; S = 0.050257992;}
else if(Age_Months < 131){L = 0.643626542; M = 143.1403553; S = 0.050371024;}
else if(Age_Months < 132){L = 0.693062173; M = 143.6949981; S = 0.050460835;}
else if(Age_Months < 133){L = 0.744289752; M = 144.2609497; S = 0.050524236;}
else if(Age_Months < 134){L = 0.79691098; M = 144.8375809; S = 0.050558224;}
else if(Age_Months < 135){L = 0.85045728; M = 145.4240246; S = 0.050560083;}
else if(Age_Months < 136){L = 0.904395871; M = 146.0191748; S = 0.050527494;}
else if(Age_Months < 137){L = 0.958138449; M = 146.621692; S = 0.050458634;}
else if(Age_Months < 138){L = 1.011054559; M = 147.2300177; S = 0.050352269;}
else if(Age_Months < 139){L = 1.062474568; M = 147.8423918; S = 0.050207825;}
else if(Age_Months < 140){L = 1.111727029; M = 148.4568879; S = 0.050025434;}
else if(Age_Months < 141){L = 1.158135105; M = 149.0714413; S = 0.049805967;}
else if(Age_Months < 142){L = 1.201050821; M = 149.6838943; S = 0.049551023;}
else if(Age_Months < 143){L = 1.239852328; M = 150.2920328; S = 0.049262895;}
else if(Age_Months < 144){L = 1.274006058; M = 150.8936469; S = 0.048944504;}
else if(Age_Months < 145){L = 1.303044695; M = 151.4865636; S = 0.048599314;}
else if(Age_Months < 146){L = 1.326605954; M = 152.0686985; S = 0.048231224;}
else if(Age_Months < 147){L = 1.344443447; M = 152.6380955; S = 0.047844442;}
else if(Age_Months < 148){L = 1.356437773; M = 153.1929631; S = 0.047443362;}
else if(Age_Months < 149){L = 1.362602695; M = 153.7317031; S = 0.04703243;}
else if(Age_Months < 150){L = 1.363085725; M = 154.2529332; S = 0.046616026;}
else if(Age_Months < 151){L = 1.358162799; M = 154.755501; S = 0.046198356;}
else if(Age_Months < 152){L = 1.348227142; M = 155.2384904; S = 0.04578335;}
else if(Age_Months < 153){L = 1.333772923; M = 155.7012216; S = 0.045374597;}
else if(Age_Months < 154){L = 1.315374704; M = 156.1432438; S = 0.044975281;}
else if(Age_Months < 155){L = 1.293664024; M = 156.564323; S = 0.044588148;}
else if(Age_Months < 156){L = 1.269304678; M = 156.9644258; S = 0.044215488;}
else if(Age_Months < 157){L = 1.242968236; M = 157.3436995; S = 0.043859135;}
else if(Age_Months < 158){L = 1.21531127; M = 157.7024507; S = 0.04352048;}
else if(Age_Months < 159){L = 1.186955477; M = 158.0411233; S = 0.043200497;}
else if(Age_Months < 160){L = 1.158471522; M = 158.3602756; S = 0.042899776;}
else if(Age_Months < 161){L = 1.130367088; M = 158.6605588; S = 0.042618565;}
else if(Age_Months < 162){L = 1.103079209; M = 158.9426964; S = 0.042356812;}
else if(Age_Months < 163){L = 1.076970655; M = 159.2074654; S = 0.042114211;}
else if(Age_Months < 164){L = 1.052329922; M = 159.455679; S = 0.041890247;}
else if(Age_Months < 165){L = 1.029374161; M = 159.688172; S = 0.04168424;}
else if(Age_Months < 166){L = 1.008254396; M = 159.9057871; S = 0.041495379;}
else if(Age_Months < 167){L = 0.989062282; M = 160.1093647; S = 0.041322765;}
else if(Age_Months < 168){L = 0.971837799; M = 160.299733; S = 0.041165437;}
else if(Age_Months < 169){L = 0.95657215; M = 160.4776996; S = 0.041022401;}
else if(Age_Months < 170){L = 0.94324228; M = 160.6440526; S = 0.040892651;}
else if(Age_Months < 171){L = 0.931767062; M = 160.7995428; S = 0.040775193;}
else if(Age_Months < 172){L = 0.922058291; M = 160.9448916; S = 0.040669052;}
else if(Age_Months < 173){L = 0.914012643; M = 161.0807857; S = 0.040573288;}
else if(Age_Months < 174){L = 0.907516917; M = 161.2078755; S = 0.040487005;}
else if(Age_Months < 175){L = 0.902452436; M = 161.3267744; S = 0.040409354;}
else if(Age_Months < 176){L = 0.898698641; M = 161.4380593; S = 0.040339537;}
else if(Age_Months < 177){L = 0.896143482; M = 161.5422726; S = 0.040276811;}
else if(Age_Months < 178){L = 0.894659668; M = 161.639917; S = 0.040220488;}
else if(Age_Months < 179){L = 0.89413892; M = 161.7314645; S = 0.040169932;}
else if(Age_Months < 180){L = 0.894475371; M = 161.8173534; S = 0.040124562;}
else if(Age_Months < 181){L = 0.895569834; M = 161.8979913; S = 0.040083845;}
else if(Age_Months < 182){L = 0.897330209; M = 161.9737558; S = 0.040047295;}
else if(Age_Months < 183){L = 0.899671635; M = 162.0449969; S = 0.040014473;}
else if(Age_Months < 184){L = 0.902516442; M = 162.1120386; S = 0.03998498;}
else if(Age_Months < 185){L = 0.905793969; M = 162.17518; S = 0.039958458;}
else if(Age_Months < 186){L = 0.909440266; M = 162.2346979; S = 0.039934584;}
else if(Age_Months < 187){L = 0.913397733; M = 162.2908474; S = 0.039913066;}
else if(Age_Months < 188){L = 0.91761471; M = 162.343864; S = 0.039893644;}
else if(Age_Months < 189){L = 0.922045055; M = 162.3939652; S = 0.039876087;}
else if(Age_Months < 190){L = 0.926647697; M = 162.4413513; S = 0.039860185;}
else if(Age_Months < 191){L = 0.931386217; M = 162.4862071; S = 0.039845754;}
else if(Age_Months < 192){L = 0.93622842; M = 162.5287029; S = 0.039832629;}
else if(Age_Months < 193){L = 0.941145943; M = 162.5689958; S = 0.039820663;}
else if(Age_Months < 194){L = 0.94611388; M = 162.6072309; S = 0.039809725;}
else if(Age_Months < 195){L = 0.95111043; M = 162.6435418; S = 0.0397997;}
else if(Age_Months < 196){L = 0.956116576; M = 162.6780519; S = 0.039790485;}
else if(Age_Months < 197){L = 0.961115792; M = 162.7108751; S = 0.039781991;}
else if(Age_Months < 198){L = 0.966093766; M = 162.7421168; S = 0.039774136;}
else if(Age_Months < 199){L = 0.971038162; M = 162.7718741; S = 0.03976685;}
else if(Age_Months < 200){L = 0.975938391; M = 162.8002371; S = 0.03976007;}
else if(Age_Months < 201){L = 0.980785418; M = 162.8272889; S = 0.039753741;}
else if(Age_Months < 202){L = 0.985571579; M = 162.8531067; S = 0.039747815;}
else if(Age_Months < 203){L = 0.99029042; M = 162.8777619; S = 0.039742249;}
else if(Age_Months < 204){L = 0.994936555; M = 162.9013208; S = 0.039737004;}
else if(Age_Months < 205){L = 0.999505539; M = 162.9238449; S = 0.039732048;}
else if(Age_Months < 206){L = 1.003993753; M = 162.9453912; S = 0.039727352;}
else if(Age_Months < 207){L = 1.0083983; M = 162.9660131; S = 0.03972289;}
else if(Age_Months < 208){L = 1.012716921; M = 162.9857599; S = 0.03971864;}
else if(Age_Months < 209){L = 1.016947912; M = 163.0046776; S = 0.039714581;}
else if(Age_Months < 210){L = 1.021090055; M = 163.0228094; S = 0.039710697;}
else if(Age_Months < 211){L = 1.025142554; M = 163.0401953; S = 0.039706971;}
else if(Age_Months < 212){L = 1.029104983; M = 163.0568727; S = 0.039703391;}
else if(Age_Months < 213){L = 1.032977233; M = 163.0728768; S = 0.039699945;}
else if(Age_Months < 214){L = 1.036759475; M = 163.0882404; S = 0.039696623;}
else if(Age_Months < 215){L = 1.040452117; M = 163.1029943; S = 0.039693415;}
else if(Age_Months < 216){L = 1.044055774; M = 163.1171673; S = 0.039690313;}
else if(Age_Months < 217){L = 1.047571238; M = 163.1307866; S = 0.039687311;}
else if(Age_Months < 218){L = 1.050999451; M = 163.1438776; S = 0.039684402;}
else if(Age_Months < 219){L = 1.054341482; M = 163.1564644; S = 0.039681581;}
else if(Age_Months < 220){L = 1.057598512; M = 163.1685697; S = 0.039678842;}
else if(Age_Months < 221){L = 1.060771808; M = 163.1802146; S = 0.039676182;}
else if(Age_Months < 222){L = 1.063862715; M = 163.1914194; S = 0.039673596;}
else if(Age_Months < 223){L = 1.066872639; M = 163.202203; S = 0.039671082;}
else if(Age_Months < 224){L = 1.069803036; M = 163.2125835; S = 0.039668635;}
else if(Age_Months < 225){L = 1.072655401; M = 163.2225779; S = 0.039666254;}
else if(Age_Months < 226){L = 1.075431258; M = 163.2322024; S = 0.039663936;}
else if(Age_Months < 227){L = 1.078132156; M = 163.2414722; S = 0.039661679;}
else if(Age_Months < 228){L = 1.080759655; M = 163.2504019; S = 0.039659481;}
else if(Age_Months < 229){L = 1.083315329; M = 163.2590052; S = 0.039657339;}
else if(Age_Months < 230){L = 1.085800751; M = 163.2672954; S = 0.039655252;}
else if(Age_Months < 231){L = 1.088217496; M = 163.2752848; S = 0.039653218;}
else if(Age_Months < 232){L = 1.090567133; M = 163.2829854; S = 0.039651237;}
else if(Age_Months < 233){L = 1.092851222; M = 163.2904086; S = 0.039649306;}
else if(Age_Months < 234){L = 1.095071313; M = 163.297565; S = 0.039647424;}
else if(Age_Months < 235){L = 1.097228939; M = 163.304465; S = 0.039645591;}
else if(Age_Months < 236){L = 1.099325619; M = 163.3111185; S = 0.039643804;}
else if(Age_Months < 237){L = 1.101362852; M = 163.3175349; S = 0.039642063;}
else if(Age_Months < 238){L = 1.103342119; M = 163.3237231; S = 0.039640367;}
else if(Age_Months < 239){L = 1.105264876; M = 163.3296918; S = 0.039638715;}
else if(Age_Months < 240){L = 1.107132561; M = 163.3354491; S = 0.039637105;}
Z_Score =  (power((Height / M), L) - 1) / (L * S);

if (doCalc) Z_Score_param.value = fixDP(Z_Score, dp);



Percentile =  ZtoPercentile(Z_Score);

if (doCalc) Percentile_param.value = fixDP(Percentile, dp);




if (doCalc){
rrclr();
if (Percentile <5){ document.getElementById('rr1_1').bgColor = '#cccccc';
}
if ((Percentile >=5) && (Percentile <95)){ document.getElementById('rr1_2').bgColor = '#cccccc';
}
if (Percentile >=95){ document.getElementById('rr1_3').bgColor = '#cccccc';
}


}


}

}

function minMaxCheck(){
if (printing) return;



with(document.CDCHeightForAgeGirls_form){

if (Age_param.value && isNaN(Age_param.value)){ clrValue(Age_param); alertNaN('Age'); }
if (Age_param.value && (Age < (2 - 0.00001))) {
Age = 0;
clrValue(Age_param);
clrResults();
doCalc = false;
 alert("The minimum value for Age is 2 yr.\nIf you are specifying a value with a different unit,\nchange the unit selector first.");
}
if (Age_param.value && Age > 19.99) {
clrValue(Age_param);
clrResults();
Age = 0;
doCalc = false;
 alert("The maximum value for Age is 19.99 yr.\nIf you are specifying a value with a different unit,\nchange the unit selector first.");
}
if (Height_param.value && isNaN(Height_param.value)){ clrValue(Height_param); alertNaN('Height'); }
if (Height_param.value && (Height < (20 - 0.00001))) {
Height = 0;
clrValue(Height_param);
clrResults();
doCalc = false;
 alert("The minimum value for Height is 20 cm.\nIf you are specifying a value with a different unit,\nchange the unit selector first.");
}
if (Height_param.value && Height > 300) {
clrValue(Height_param);
clrResults();
Height = 0;
doCalc = false;
 alert("The maximum value for Height is 300 cm.\nIf you are specifying a value with a different unit,\nchange the unit selector first.");
}


}

}

function clrResults(){


with(document.CDCHeightForAgeGirls_form){

Z_Score_param.value = '';
Percentile_param.value = '';

rrclr();

}

}

var Age = null,
Height = null,
Age_Months = null,
Z_Score = null,
Percentile = null,
param_value = null;










function rrclr(){
document.getElementById('rr1_1').bgColor = '';
document.getElementById('rr1_2').bgColor = '';
document.getElementById('rr1_3').bgColor = '';
}




/* ]]> */
</script>



<form name="CDCHeightForAgeGirls_form" id="CDCHeightForAgeGirls_form" action="" onsubmit="return false;" onkeydown="clrResults(); resetInTime();" onkeyup="CDCHeightForAgeGirls_fx();" onreset="rrclr();">

<table width="100%" cellpadding="4" cellspacing="0" summary="EBMcalc Table">
<tr><td class="medCalcTitleBox" width="1%"><br /></td>
<td class="medCalcTitleBox">
<span class="medCalcFontTitleBox">

 
CDC height for age percentiles for girls (2 to 20 years)
</span></td></tr></table><br />&nbsp;<br />

<div id="calc_main">

<div id="calc_input">
<center>
<span class="medCalcFontIO">
Input:
</span>
<br />&nbsp;<br />
<table cellpadding="3" cellspacing="0" summary="EBMcalc Table">
<tr><td align="right" width="42%"><span class="medCalcFontOneBold">Age</span> </td>
<td align="left" valign="top" nowrap="nowrap" width="5%">&nbsp; <input type="text" name="Age_param" size="6" value="" onblur="minMaxCheck(); CDCHeightForAgeGirls_fx();" onchange="CDCHeightForAgeGirls_fx();" /></td>
<td align="left" width="125" valign="top"> <select name="Age_unit" onchange="CDCHeightForAgeGirls_fx();" style="width:115px;" class="medCalcFontSelect">
<option value="0.0833333333333333|0|mo">mo</option>
<option value="1|0|yr" selected="selected">yr</option>
</select> </td></tr>

<tr><td align="right" width="42%"><span class="medCalcFontOneBold">Height</span> </td>
<td align="left" valign="top" nowrap="nowrap" width="5%">&nbsp; <input type="text" name="Height_param" size="6" value="" onblur="minMaxCheck(); CDCHeightForAgeGirls_fx();" onchange="CDCHeightForAgeGirls_fx();" /></td>
<td align="left" width="125" valign="top"> <select name="Height_unit" onchange="CDCHeightForAgeGirls_fx();" style="width:115px;" class="medCalcFontSelect">
<option value="1|0|cm" selected="selected">cm</option>
<option value="2.54|0|in">in</option>
<option value="100|0|m">m</option>
</select> </td></tr>


</table>
</center>

</div>
<br />&nbsp;<br />
<div id="calc_result">
<center><span class="medCalcFontIO">Results:</span>

<br />&nbsp;<br />
<table summary="EBMcalc Table" class="medCalcResultBox" cellspacing="4">
<tr>
<td align="right"><span class="medCalcFontOneBold">Z-score</span></td>
<td valign="top" nowrap="nowrap">&nbsp; <input type="text" name="Z_Score_param" size="6" onfocus="blur();" /></td>
</tr>

<tr>
<td align="right"><span class="medCalcFontOneBold">Percentile</span></td>
<td valign="top" nowrap="nowrap">&nbsp; <input type="text" name="Percentile_param" size="6" onfocus="blur();" /></td>
</tr>


<tr><td colspan="3">&nbsp;<br /></td></tr>
<tr><td colspan="3" align="center"><span class="medCalcFontOneBold">Decimal Precision &nbsp;</span>
<select name="decpts" onchange="CDCHeightForAgeGirls_fx();" class="medCalcFontSelect">
<option>0</option>
<option selected="selected">1</option>
<option>2</option>
<option>3</option>

</select></td></tr>

</table>
</center>

<br />&nbsp;<br />
<table width="100%" cellpadding="4" cellspacing="0" summary="EBMcalc Table">
<tr><td class="medCalcTitleBox" width="1%"><br /></td>
<td class="medCalcTitleBox">
<span class="medCalcFontTitleBox">

 Height for Age Percentile Interpretation
</span></td></tr></table><br />&nbsp;<br />
<center>
<table border="1" cellpadding="4" cellspacing="0" summary="RRTable">
<tr id="rr1_1"><td align="right" style="border-right: 0px;" nowrap="nowrap"><span class="medCalcFontOneBold">Percentile &lt;5:</span></td>
<td align="left" style="border-left: 0px;"><span class="medCalcFontOne">Short stature</span></td></tr>
<tr id="rr1_2"><td align="right" style="border-right: 0px;" nowrap="nowrap"><span class="medCalcFontOneBold">Percentile &gt;=5 and &lt;95:</span></td>
<td align="left" style="border-left: 0px;"><span class="medCalcFontOne">Normal stature</span></td></tr>
<tr id="rr1_3"><td align="right" style="border-right: 0px;" nowrap="nowrap"><span class="medCalcFontOneBold">Percentile &gt;=95:</span></td>
<td align="left" style="border-left: 0px;"><span class="medCalcFontOne">Tall stature</span></td></tr>

</table>
</center>
<br />&nbsp;<br />


</div>
</div><div id="pretextrefs">
&nbsp;
</div>

<div id="calc_notes">
<span class="medCalcFontOneBold">Notes</span>
<ul class="medCalcFontOne">
<li>In some cases, including consideration of pharmacotherapy, more stringent definitions of short or tall stature are  used, with thresholds of &lt;3rd percentile or  &lt;1st percentile for short stature, and &gt;97th or &gt;99th percentile for tall stature.</li>
<li>At the extremes (&gt;97th percentile or &lt;3rd percentile), small differences in percentiles represent  clinically important differences in height. At these extremes, the Z-score is a more precise reflection  of how far the measurement deviates from the mean, and is a useful tool for tracking changes.</li>

</ul>
</div>


<div id="calc_tables">
<br />&nbsp;<br />
<span class="medCalcFontOneBold">Examples</span>
<br />&nbsp;<br />
<center>
<table border="1" cellpadding="5" cellspacing="0" width="40%" class="medCalcFontOne" summary="EBMcalc Table">
<tr bgcolor="#cccccc" id="T1HR">
<td align="center" id="T1HR_C1"><b>Z-score</b></td><td align="center" id="T1HR_C2"><b>Percentile equivalent</b></td></tr>
<tr><td align="center" id="T1CellR1C1"><div id="T1R1C1">- 3.0</div></td><td align="center" id="T1CellR1C2"><div id="T1R1C2">0.3</div></td></tr>
<tr><td align="center" id="T1CellR2C1"><div id="T1R2C1">- 2.0</div></td><td align="center" id="T1CellR2C2"><div id="T1R2C2">2.5</div></td></tr>
<tr><td align="center" id="T1CellR3C1"><div id="T1R3C1">+ 2.0</div></td><td align="center" id="T1CellR3C2"><div id="T1R3C2">97.5</div></td></tr>
<tr><td align="center" id="T1CellR4C1"><div id="T1R4C1">+ 3.0</div></td><td align="center" id="T1CellR4C2"><div id="T1R4C2">99.7</div></td></tr>
</table></center>

</div>

<br />&nbsp;<br />

<div id="calc_refs">
<span class="medCalcFontRef"><b>References</b></span>
<ol>
<li><span class="medCalcFontRef">Percentile conversion from Z-score is done by table look-up in the standard normal table.
Percentiles are provided for Z-scores between <span style="white-space: nowrap;">-3.09</span>
and 3.09. Values beyond these extremes return percentiles of 0.1 and 99.9, respectively.
</span></li>
<li><span class="medCalcFontRef">LMS Parameters for Girls: Height for Age. National health and nutrition survey (NHANES), CDC/National Center for Health Statistics.</span></li>

</ol>
</div>

</form>
<div id="calc_disclaimer"><br />&nbsp;<br /><center><br />&nbsp;<br />&nbsp;<br /><table bgcolor="#cccccc" cellpadding="16" summary="EBMcalc Table"><tr><td><center><span class="medCalcFontTwo"><b><u>Legal Notices and Disclaimer</u></b></span></center><br />&nbsp;<br /><span class="medCalcFontTwo">All information contained in and produced by the EBMcalc system is provided
for educational purposes only. This information should not be used for the 
diagnosis or treatment of any health problem or disease.
<b>THIS INFORMATION IS NOT INTENDED TO REPLACE CLINICAL JUDGMENT OR
GUIDE INDIVIDUAL PATIENT CARE IN ANY MANNER.
</b><a href="disclaimer-en.htm" target="_blank">Click here for full notice and disclaimer.</a></span><br />&nbsp;<br /><center><span class="medCalcFontTwo">EBMcalc is Copyright &#169; 1998-2018 Foundation Internet Services &nbsp;&nbsp; [Build 255633 v18.3]</span></center></td></tr></table></center>
</div>
</div>
</body>
</html>

<!-- 1532964171 //-->
